name: Build LLauncher

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux binaries (x86_64 and ARM64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (for x86_64)
        if: matrix.arch == 'x86_64'
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Build x86_64 binary (native)
        if: matrix.arch == 'x86_64'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pyinstaller --clean --onefile --name llauncher_linux_x64 main.py

      - name: Set up QEMU and Docker Buildx (for ARM64)
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build aarch64 binary (using ARM64 Docker container)
        if: matrix.arch == 'aarch64'
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            arm64v8/python:3.9 \
            /bin/bash -c "
              apt-get update && apt-get install -y python3-pip python3-dev build-essential
              pip install --upgrade pip
              pip install pyinstaller
              pip install -r requirements.txt
              pyinstaller --clean --onefile --name llauncher_linux_arm64 main.py
            "

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: llauncher-linux-${{ matrix.arch }}
          path: |
            dist/llauncher_linux_x64
            dist/llauncher_linux_arm64

  build-windows:
    name: Build Windows binaries
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build x64 binary
        if: matrix.arch == 'x64'
        run: |
          pyinstaller --clean --onefile --name llauncher_windows_x64.exe main.py

      - name: Configure ARM64 build environment
        if: matrix.arch == 'arm64'
        # Necesitamos configurar herramientas específicas para cross-compilar para ARM64
        run: |
          # Instalar dependencias para cross-compilación
          pip install cross-compiler-tools
          # Establecer las variables de entorno para ARM64
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
          pyinstaller --clean --onefile --name llauncher_windows_arm64.exe --target-arch aarch64 main.py
        shell: bash
        continue-on-error: true # Permitir fallos en esta fase experimental

      - name: Upload artifacts - x64
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: llauncher-windows-${{ matrix.arch }}
          path: dist/llauncher_windows_x64.exe

      - name: Upload artifacts - ARM64
        if: matrix.arch == 'arm64' && success()
        uses: actions/upload-artifact@v4
        with:
          name: llauncher-windows-${{ matrix.arch }}
          path: dist/llauncher_windows_arm64.exe

  build-macos:
    name: Build macOS Universal binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies for both architectures
        run: |
          # Crear entornos virtuales separados para cada arquitectura
          python3 -m venv venv_arm64
          python3 -m venv venv_x86_64

          # Instalar para arm64
          arch -arm64 ./venv_arm64/bin/python -m pip install --upgrade pip
          arch -arm64 ./venv_arm64/bin/pip install pyinstaller
          arch -arm64 ./venv_arm64/bin/pip install -r requirements.txt

          # Instalar para x86_64
          arch -x86_64 ./venv_x86_64/bin/python -m pip install --upgrade pip
          arch -x86_64 ./venv_x86_64/bin/pip install pyinstaller
          arch -x86_64 ./venv_x86_64/bin/pip install -r requirements.txt
      - name: Build Intel and ARM binaries
        run: |
          # Build x86_64
          arch -x86_64 ./venv_x86_64/bin/pyinstaller --clean --onefile --distpath dist/x86_64 --name llauncher_macos_x64 main.py

          # Build arm64
          arch -arm64 ./venv_arm64/bin/pyinstaller --clean --onefile --distpath dist/arm64 --name llauncher_macos_arm64 main.py

          # Create universal binary
          mkdir -p dist/universal
          lipo -create dist/x86_64/llauncher_macos_x64 dist/arm64/llauncher_macos_arm64 -output dist/universal/llauncher_macos_universal
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: llauncher-macos-universal
          path: dist/universal/llauncher_macos_universal
